/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ManageGradientsRouteImport } from './routes/manage-gradients'
import { Route as EditorRouteImport } from './routes/editor'
import { Route as DiscoveryRouteImport } from './routes/discovery'
import { Route as PagesRouteRouteImport } from './routes/_pages/route'
import { Route as PagesIndexRouteImport } from './routes/_pages/index'
import { Route as ShareStateRouteImport } from './routes/share.$state'
import { Route as PagesResourcesRouteImport } from './routes/_pages/resources'
import { Route as PagesGuideRouteImport } from './routes/_pages/guide'
import { Route as PagesGalleryRouteImport } from './routes/_pages/gallery'
import { Route as PagesBlogIndexRouteImport } from './routes/_pages/blog/index'
import { Route as PagesBlogSlugRouteImport } from './routes/_pages/blog/$slug'
import { ServerRoute as SitemapDotxmlServerRouteImport } from './routes/sitemap[.]xml'
import { ServerRoute as RobotsDottxtServerRouteImport } from './routes/robots[.]txt'

const rootServerRouteImport = createServerRootRoute()

const ManageGradientsRoute = ManageGradientsRouteImport.update({
  id: '/manage-gradients',
  path: '/manage-gradients',
  getParentRoute: () => rootRouteImport,
} as any)
const EditorRoute = EditorRouteImport.update({
  id: '/editor',
  path: '/editor',
  getParentRoute: () => rootRouteImport,
} as any)
const DiscoveryRoute = DiscoveryRouteImport.update({
  id: '/discovery',
  path: '/discovery',
  getParentRoute: () => rootRouteImport,
} as any)
const PagesRouteRoute = PagesRouteRouteImport.update({
  id: '/_pages',
  getParentRoute: () => rootRouteImport,
} as any)
const PagesIndexRoute = PagesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PagesRouteRoute,
} as any)
const ShareStateRoute = ShareStateRouteImport.update({
  id: '/share/$state',
  path: '/share/$state',
  getParentRoute: () => rootRouteImport,
} as any)
const PagesResourcesRoute = PagesResourcesRouteImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => PagesRouteRoute,
} as any)
const PagesGuideRoute = PagesGuideRouteImport.update({
  id: '/guide',
  path: '/guide',
  getParentRoute: () => PagesRouteRoute,
} as any)
const PagesGalleryRoute = PagesGalleryRouteImport.update({
  id: '/gallery',
  path: '/gallery',
  getParentRoute: () => PagesRouteRoute,
} as any)
const PagesBlogIndexRoute = PagesBlogIndexRouteImport.update({
  id: '/blog/',
  path: '/blog/',
  getParentRoute: () => PagesRouteRoute,
} as any)
const PagesBlogSlugRoute = PagesBlogSlugRouteImport.update({
  id: '/blog/$slug',
  path: '/blog/$slug',
  getParentRoute: () => PagesRouteRoute,
} as any)
const SitemapDotxmlServerRoute = SitemapDotxmlServerRouteImport.update({
  id: '/sitemap.xml',
  path: '/sitemap.xml',
  getParentRoute: () => rootServerRouteImport,
} as any)
const RobotsDottxtServerRoute = RobotsDottxtServerRouteImport.update({
  id: '/robots.txt',
  path: '/robots.txt',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/discovery': typeof DiscoveryRoute
  '/editor': typeof EditorRoute
  '/manage-gradients': typeof ManageGradientsRoute
  '/gallery': typeof PagesGalleryRoute
  '/guide': typeof PagesGuideRoute
  '/resources': typeof PagesResourcesRoute
  '/share/$state': typeof ShareStateRoute
  '/': typeof PagesIndexRoute
  '/blog/$slug': typeof PagesBlogSlugRoute
  '/blog': typeof PagesBlogIndexRoute
}
export interface FileRoutesByTo {
  '/discovery': typeof DiscoveryRoute
  '/editor': typeof EditorRoute
  '/manage-gradients': typeof ManageGradientsRoute
  '/gallery': typeof PagesGalleryRoute
  '/guide': typeof PagesGuideRoute
  '/resources': typeof PagesResourcesRoute
  '/share/$state': typeof ShareStateRoute
  '/': typeof PagesIndexRoute
  '/blog/$slug': typeof PagesBlogSlugRoute
  '/blog': typeof PagesBlogIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_pages': typeof PagesRouteRouteWithChildren
  '/discovery': typeof DiscoveryRoute
  '/editor': typeof EditorRoute
  '/manage-gradients': typeof ManageGradientsRoute
  '/_pages/gallery': typeof PagesGalleryRoute
  '/_pages/guide': typeof PagesGuideRoute
  '/_pages/resources': typeof PagesResourcesRoute
  '/share/$state': typeof ShareStateRoute
  '/_pages/': typeof PagesIndexRoute
  '/_pages/blog/$slug': typeof PagesBlogSlugRoute
  '/_pages/blog/': typeof PagesBlogIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/discovery'
    | '/editor'
    | '/manage-gradients'
    | '/gallery'
    | '/guide'
    | '/resources'
    | '/share/$state'
    | '/'
    | '/blog/$slug'
    | '/blog'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/discovery'
    | '/editor'
    | '/manage-gradients'
    | '/gallery'
    | '/guide'
    | '/resources'
    | '/share/$state'
    | '/'
    | '/blog/$slug'
    | '/blog'
  id:
    | '__root__'
    | '/_pages'
    | '/discovery'
    | '/editor'
    | '/manage-gradients'
    | '/_pages/gallery'
    | '/_pages/guide'
    | '/_pages/resources'
    | '/share/$state'
    | '/_pages/'
    | '/_pages/blog/$slug'
    | '/_pages/blog/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PagesRouteRoute: typeof PagesRouteRouteWithChildren
  DiscoveryRoute: typeof DiscoveryRoute
  EditorRoute: typeof EditorRoute
  ManageGradientsRoute: typeof ManageGradientsRoute
  ShareStateRoute: typeof ShareStateRoute
}
export interface FileServerRoutesByFullPath {
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRoutesByTo {
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/robots.txt' | '/sitemap.xml'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/robots.txt' | '/sitemap.xml'
  id: '__root__' | '/robots.txt' | '/sitemap.xml'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  RobotsDottxtServerRoute: typeof RobotsDottxtServerRoute
  SitemapDotxmlServerRoute: typeof SitemapDotxmlServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/manage-gradients': {
      id: '/manage-gradients'
      path: '/manage-gradients'
      fullPath: '/manage-gradients'
      preLoaderRoute: typeof ManageGradientsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/editor': {
      id: '/editor'
      path: '/editor'
      fullPath: '/editor'
      preLoaderRoute: typeof EditorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discovery': {
      id: '/discovery'
      path: '/discovery'
      fullPath: '/discovery'
      preLoaderRoute: typeof DiscoveryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pages': {
      id: '/_pages'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PagesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pages/': {
      id: '/_pages/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PagesIndexRouteImport
      parentRoute: typeof PagesRouteRoute
    }
    '/share/$state': {
      id: '/share/$state'
      path: '/share/$state'
      fullPath: '/share/$state'
      preLoaderRoute: typeof ShareStateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pages/resources': {
      id: '/_pages/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof PagesResourcesRouteImport
      parentRoute: typeof PagesRouteRoute
    }
    '/_pages/guide': {
      id: '/_pages/guide'
      path: '/guide'
      fullPath: '/guide'
      preLoaderRoute: typeof PagesGuideRouteImport
      parentRoute: typeof PagesRouteRoute
    }
    '/_pages/gallery': {
      id: '/_pages/gallery'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof PagesGalleryRouteImport
      parentRoute: typeof PagesRouteRoute
    }
    '/_pages/blog/': {
      id: '/_pages/blog/'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof PagesBlogIndexRouteImport
      parentRoute: typeof PagesRouteRoute
    }
    '/_pages/blog/$slug': {
      id: '/_pages/blog/$slug'
      path: '/blog/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof PagesBlogSlugRouteImport
      parentRoute: typeof PagesRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/sitemap.xml': {
      id: '/sitemap.xml'
      path: '/sitemap.xml'
      fullPath: '/sitemap.xml'
      preLoaderRoute: typeof SitemapDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/robots.txt': {
      id: '/robots.txt'
      path: '/robots.txt'
      fullPath: '/robots.txt'
      preLoaderRoute: typeof RobotsDottxtServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface PagesRouteRouteChildren {
  PagesGalleryRoute: typeof PagesGalleryRoute
  PagesGuideRoute: typeof PagesGuideRoute
  PagesResourcesRoute: typeof PagesResourcesRoute
  PagesIndexRoute: typeof PagesIndexRoute
  PagesBlogSlugRoute: typeof PagesBlogSlugRoute
  PagesBlogIndexRoute: typeof PagesBlogIndexRoute
}

const PagesRouteRouteChildren: PagesRouteRouteChildren = {
  PagesGalleryRoute: PagesGalleryRoute,
  PagesGuideRoute: PagesGuideRoute,
  PagesResourcesRoute: PagesResourcesRoute,
  PagesIndexRoute: PagesIndexRoute,
  PagesBlogSlugRoute: PagesBlogSlugRoute,
  PagesBlogIndexRoute: PagesBlogIndexRoute,
}

const PagesRouteRouteWithChildren = PagesRouteRoute._addFileChildren(
  PagesRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  PagesRouteRoute: PagesRouteRouteWithChildren,
  DiscoveryRoute: DiscoveryRoute,
  EditorRoute: EditorRoute,
  ManageGradientsRoute: ManageGradientsRoute,
  ShareStateRoute: ShareStateRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  RobotsDottxtServerRoute: RobotsDottxtServerRoute,
  SitemapDotxmlServerRoute: SitemapDotxmlServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
