/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as EditorRouteImport } from './routes/editor'
import { Route as DiscoveryRouteImport } from './routes/discovery'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ShareStateRouteImport } from './routes/share.$state'
import { ServerRoute as SitemapDotxmlServerRouteImport } from './routes/sitemap[.]xml'
import { ServerRoute as RobotsDottxtServerRouteImport } from './routes/robots[.]txt'

const rootServerRouteImport = createServerRootRoute()

const EditorRoute = EditorRouteImport.update({
  id: '/editor',
  path: '/editor',
  getParentRoute: () => rootRouteImport,
} as any)
const DiscoveryRoute = DiscoveryRouteImport.update({
  id: '/discovery',
  path: '/discovery',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ShareStateRoute = ShareStateRouteImport.update({
  id: '/share/$state',
  path: '/share/$state',
  getParentRoute: () => rootRouteImport,
} as any)
const SitemapDotxmlServerRoute = SitemapDotxmlServerRouteImport.update({
  id: '/sitemap.xml',
  path: '/sitemap.xml',
  getParentRoute: () => rootServerRouteImport,
} as any)
const RobotsDottxtServerRoute = RobotsDottxtServerRouteImport.update({
  id: '/robots.txt',
  path: '/robots.txt',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/discovery': typeof DiscoveryRoute
  '/editor': typeof EditorRoute
  '/share/$state': typeof ShareStateRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/discovery': typeof DiscoveryRoute
  '/editor': typeof EditorRoute
  '/share/$state': typeof ShareStateRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/discovery': typeof DiscoveryRoute
  '/editor': typeof EditorRoute
  '/share/$state': typeof ShareStateRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/discovery' | '/editor' | '/share/$state'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/discovery' | '/editor' | '/share/$state'
  id: '__root__' | '/' | '/discovery' | '/editor' | '/share/$state'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DiscoveryRoute: typeof DiscoveryRoute
  EditorRoute: typeof EditorRoute
  ShareStateRoute: typeof ShareStateRoute
}
export interface FileServerRoutesByFullPath {
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRoutesByTo {
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/robots.txt': typeof RobotsDottxtServerRoute
  '/sitemap.xml': typeof SitemapDotxmlServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/robots.txt' | '/sitemap.xml'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/robots.txt' | '/sitemap.xml'
  id: '__root__' | '/robots.txt' | '/sitemap.xml'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  RobotsDottxtServerRoute: typeof RobotsDottxtServerRoute
  SitemapDotxmlServerRoute: typeof SitemapDotxmlServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/editor': {
      id: '/editor'
      path: '/editor'
      fullPath: '/editor'
      preLoaderRoute: typeof EditorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/discovery': {
      id: '/discovery'
      path: '/discovery'
      fullPath: '/discovery'
      preLoaderRoute: typeof DiscoveryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/share/$state': {
      id: '/share/$state'
      path: '/share/$state'
      fullPath: '/share/$state'
      preLoaderRoute: typeof ShareStateRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/sitemap.xml': {
      id: '/sitemap.xml'
      path: '/sitemap.xml'
      fullPath: '/sitemap.xml'
      preLoaderRoute: typeof SitemapDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/robots.txt': {
      id: '/robots.txt'
      path: '/robots.txt'
      fullPath: '/robots.txt'
      preLoaderRoute: typeof RobotsDottxtServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DiscoveryRoute: DiscoveryRoute,
  EditorRoute: EditorRoute,
  ShareStateRoute: ShareStateRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  RobotsDottxtServerRoute: RobotsDottxtServerRoute,
  SitemapDotxmlServerRoute: SitemapDotxmlServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
